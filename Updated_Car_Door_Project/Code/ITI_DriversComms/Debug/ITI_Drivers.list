
ITI_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e4c  08000e54  00010e54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e4c  08000e4c  00010e54  2**0
                  CONTENTS
  4 .ARM          00000000  08000e4c  08000e4c  00010e54  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e4c  08000e54  00010e54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e4c  08000e4c  00010e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e50  08000e50  00010e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000e54  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000e54  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010e54  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010e84  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a1f  00000000  00000000  00010ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008a9  00000000  00000000  000128e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  00013190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001b7  00000000  00000000  00013400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001451  00000000  00000000  000135b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e6b  00000000  00000000  00014a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f154  00000000  00000000  00016873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000770  00000000  00000000  000959c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00096138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e34 	.word	0x08000e34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000e34 	.word	0x08000e34

080001d4 <MEXTI_vHWInterruptEnable>:
/* 1- Function Description -> Function to Set the Interrupt mask on for the required Line              */
/* 2- Function Input       -> LINE                                                                     */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vHWInterruptEnable(EXTI_Line_x LINE){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI -> IMR , LINE);
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <MEXTI_vHWInterruptEnable+0x2c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	79fa      	ldrb	r2, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <MEXTI_vHWInterruptEnable+0x2c>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40013c00 	.word	0x40013c00

08000204 <MEXTI_vSetTriggerType>:
/* 1- Function Description -> Function to set the trigger type the interrupt/event will activate on    */
/* 2- Function Input       -> LINE, Trigger              											   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vSetTriggerType(EXTI_Line_x LINE, EXTI_Trigger Trigger){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	460a      	mov	r2, r1
 800020e:	71fb      	strb	r3, [r7, #7]
 8000210:	4613      	mov	r3, r2
 8000212:	71bb      	strb	r3, [r7, #6]
	switch (Trigger){
 8000214:	79bb      	ldrb	r3, [r7, #6]
 8000216:	2b02      	cmp	r3, #2
 8000218:	d01c      	beq.n	8000254 <MEXTI_vSetTriggerType+0x50>
 800021a:	2b02      	cmp	r3, #2
 800021c:	dc2f      	bgt.n	800027e <MEXTI_vSetTriggerType+0x7a>
 800021e:	2b00      	cmp	r3, #0
 8000220:	d002      	beq.n	8000228 <MEXTI_vSetTriggerType+0x24>
 8000222:	2b01      	cmp	r3, #1
 8000224:	d00b      	beq.n	800023e <MEXTI_vSetTriggerType+0x3a>
	case Any_Change:
		SET_BIT(EXTI -> RSTR , LINE);
		SET_BIT(EXTI -> FSTR , LINE);
		break;
	default:
		break;
 8000226:	e02a      	b.n	800027e <MEXTI_vSetTriggerType+0x7a>
		SET_BIT(EXTI -> RSTR , LINE);
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <MEXTI_vSetTriggerType+0x88>)
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	79fa      	ldrb	r2, [r7, #7]
 800022e:	2101      	movs	r1, #1
 8000230:	fa01 f202 	lsl.w	r2, r1, r2
 8000234:	4611      	mov	r1, r2
 8000236:	4a15      	ldr	r2, [pc, #84]	; (800028c <MEXTI_vSetTriggerType+0x88>)
 8000238:	430b      	orrs	r3, r1
 800023a:	6093      	str	r3, [r2, #8]
		break;
 800023c:	e020      	b.n	8000280 <MEXTI_vSetTriggerType+0x7c>
		SET_BIT(EXTI -> FSTR , LINE);
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <MEXTI_vSetTriggerType+0x88>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	79fa      	ldrb	r2, [r7, #7]
 8000244:	2101      	movs	r1, #1
 8000246:	fa01 f202 	lsl.w	r2, r1, r2
 800024a:	4611      	mov	r1, r2
 800024c:	4a0f      	ldr	r2, [pc, #60]	; (800028c <MEXTI_vSetTriggerType+0x88>)
 800024e:	430b      	orrs	r3, r1
 8000250:	60d3      	str	r3, [r2, #12]
		break;
 8000252:	e015      	b.n	8000280 <MEXTI_vSetTriggerType+0x7c>
		SET_BIT(EXTI -> RSTR , LINE);
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <MEXTI_vSetTriggerType+0x88>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	2101      	movs	r1, #1
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	4611      	mov	r1, r2
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <MEXTI_vSetTriggerType+0x88>)
 8000264:	430b      	orrs	r3, r1
 8000266:	6093      	str	r3, [r2, #8]
		SET_BIT(EXTI -> FSTR , LINE);
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <MEXTI_vSetTriggerType+0x88>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	79fa      	ldrb	r2, [r7, #7]
 800026e:	2101      	movs	r1, #1
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	4611      	mov	r1, r2
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <MEXTI_vSetTriggerType+0x88>)
 8000278:	430b      	orrs	r3, r1
 800027a:	60d3      	str	r3, [r2, #12]
		break;
 800027c:	e000      	b.n	8000280 <MEXTI_vSetTriggerType+0x7c>
		break;
 800027e:	bf00      	nop
	}
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	40013c00 	.word	0x40013c00

08000290 <MEXTI_vSetExtiConfig>:
/*                            system configuration                                                     */
/* 2- Function Input       -> LINE, PORT              											       */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vSetExtiConfig(EXTI_Line_x LINE, SYSCFG_Port PORT){
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	460a      	mov	r2, r1
 800029a:	71fb      	strb	r3, [r7, #7]
 800029c:	4613      	mov	r3, r2
 800029e:	71bb      	strb	r3, [r7, #6]
	u8 CRx  = LINE / 4;
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	089b      	lsrs	r3, r3, #2
 80002a4:	73fb      	strb	r3, [r7, #15]
	u8 line = LINE % 4;
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	f003 0303 	and.w	r3, r3, #3
 80002ac:	73bb      	strb	r3, [r7, #14]
	switch (CRx) {
 80002ae:	7bfb      	ldrb	r3, [r7, #15]
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	f200 8133 	bhi.w	800051c <MEXTI_vSetExtiConfig+0x28c>
 80002b6:	a201      	add	r2, pc, #4	; (adr r2, 80002bc <MEXTI_vSetExtiConfig+0x2c>)
 80002b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002bc:	080002cd 	.word	0x080002cd
 80002c0:	08000361 	.word	0x08000361
 80002c4:	080003f5 	.word	0x080003f5
 80002c8:	08000489 	.word	0x08000489
	case 0:
		switch (line){
 80002cc:	7bbb      	ldrb	r3, [r7, #14]
 80002ce:	2b03      	cmp	r3, #3
 80002d0:	d844      	bhi.n	800035c <MEXTI_vSetExtiConfig+0xcc>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <MEXTI_vSetExtiConfig+0x48>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	080002e9 	.word	0x080002e9
 80002dc:	08000303 	.word	0x08000303
 80002e0:	08000321 	.word	0x08000321
 80002e4:	0800033f 	.word	0x0800033f
		case 0:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK1;
 80002e8:	4b90      	ldr	r3, [pc, #576]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a8f      	ldr	r2, [pc, #572]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80002ee:	f023 030f 	bic.w	r3, r3, #15
 80002f2:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= PORT;
 80002f4:	4b8d      	ldr	r3, [pc, #564]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	498c      	ldr	r1, [pc, #560]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80002fc:	4313      	orrs	r3, r2
 80002fe:	600b      	str	r3, [r1, #0]
			break;
 8000300:	e02d      	b.n	800035e <MEXTI_vSetExtiConfig+0xce>
		case 1:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK2;
 8000302:	4b8a      	ldr	r3, [pc, #552]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a89      	ldr	r2, [pc, #548]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800030c:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= (PORT <<4);
 800030e:	4b87      	ldr	r3, [pc, #540]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	79ba      	ldrb	r2, [r7, #6]
 8000314:	0112      	lsls	r2, r2, #4
 8000316:	4611      	mov	r1, r2
 8000318:	4a84      	ldr	r2, [pc, #528]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800031a:	430b      	orrs	r3, r1
 800031c:	6013      	str	r3, [r2, #0]
			break;
 800031e:	e01e      	b.n	800035e <MEXTI_vSetExtiConfig+0xce>
		case 2:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK3;
 8000320:	4b82      	ldr	r3, [pc, #520]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a81      	ldr	r2, [pc, #516]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000326:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800032a:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= (PORT << 8);
 800032c:	4b7f      	ldr	r3, [pc, #508]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	79ba      	ldrb	r2, [r7, #6]
 8000332:	0212      	lsls	r2, r2, #8
 8000334:	4611      	mov	r1, r2
 8000336:	4a7d      	ldr	r2, [pc, #500]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
			break;
 800033c:	e00f      	b.n	800035e <MEXTI_vSetExtiConfig+0xce>
		case 3:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK4;
 800033e:	4b7b      	ldr	r3, [pc, #492]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a7a      	ldr	r2, [pc, #488]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000348:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= (PORT << 12);
 800034a:	4b78      	ldr	r3, [pc, #480]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	79ba      	ldrb	r2, [r7, #6]
 8000350:	0312      	lsls	r2, r2, #12
 8000352:	4611      	mov	r1, r2
 8000354:	4a75      	ldr	r2, [pc, #468]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000356:	430b      	orrs	r3, r1
 8000358:	6013      	str	r3, [r2, #0]
			break;
 800035a:	e000      	b.n	800035e <MEXTI_vSetExtiConfig+0xce>
		default:
			break;
 800035c:	bf00      	nop
		}
		break;
 800035e:	e0de      	b.n	800051e <MEXTI_vSetExtiConfig+0x28e>
	case 1:
		switch (line){
 8000360:	7bbb      	ldrb	r3, [r7, #14]
 8000362:	2b03      	cmp	r3, #3
 8000364:	d844      	bhi.n	80003f0 <MEXTI_vSetExtiConfig+0x160>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <MEXTI_vSetExtiConfig+0xdc>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	0800037d 	.word	0x0800037d
 8000370:	08000397 	.word	0x08000397
 8000374:	080003b5 	.word	0x080003b5
 8000378:	080003d3 	.word	0x080003d3
		case 0:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK1;
 800037c:	4b6b      	ldr	r3, [pc, #428]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a6a      	ldr	r2, [pc, #424]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000382:	f023 030f 	bic.w	r3, r3, #15
 8000386:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= PORT;
 8000388:	4b68      	ldr	r3, [pc, #416]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800038a:	685a      	ldr	r2, [r3, #4]
 800038c:	79bb      	ldrb	r3, [r7, #6]
 800038e:	4967      	ldr	r1, [pc, #412]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000390:	4313      	orrs	r3, r2
 8000392:	604b      	str	r3, [r1, #4]
			break;
 8000394:	e02d      	b.n	80003f2 <MEXTI_vSetExtiConfig+0x162>
		case 1:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK2;
 8000396:	4b65      	ldr	r3, [pc, #404]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	4a64      	ldr	r2, [pc, #400]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800039c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003a0:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= (PORT <<4);
 80003a2:	4b62      	ldr	r3, [pc, #392]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	79ba      	ldrb	r2, [r7, #6]
 80003a8:	0112      	lsls	r2, r2, #4
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a5f      	ldr	r2, [pc, #380]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80003ae:	430b      	orrs	r3, r1
 80003b0:	6053      	str	r3, [r2, #4]
			break;
 80003b2:	e01e      	b.n	80003f2 <MEXTI_vSetExtiConfig+0x162>
		case 2:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK3;
 80003b4:	4b5d      	ldr	r3, [pc, #372]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a5c      	ldr	r2, [pc, #368]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80003ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80003be:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= (PORT << 8);
 80003c0:	4b5a      	ldr	r3, [pc, #360]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	79ba      	ldrb	r2, [r7, #6]
 80003c6:	0212      	lsls	r2, r2, #8
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a58      	ldr	r2, [pc, #352]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80003cc:	430b      	orrs	r3, r1
 80003ce:	6053      	str	r3, [r2, #4]
			break;
 80003d0:	e00f      	b.n	80003f2 <MEXTI_vSetExtiConfig+0x162>
		case 3:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK4;
 80003d2:	4b56      	ldr	r3, [pc, #344]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	4a55      	ldr	r2, [pc, #340]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80003d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80003dc:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= (PORT << 12);
 80003de:	4b53      	ldr	r3, [pc, #332]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	79ba      	ldrb	r2, [r7, #6]
 80003e4:	0312      	lsls	r2, r2, #12
 80003e6:	4611      	mov	r1, r2
 80003e8:	4a50      	ldr	r2, [pc, #320]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80003ea:	430b      	orrs	r3, r1
 80003ec:	6053      	str	r3, [r2, #4]
			break;
 80003ee:	e000      	b.n	80003f2 <MEXTI_vSetExtiConfig+0x162>
		default:
			break;
 80003f0:	bf00      	nop
		}
		break;
 80003f2:	e094      	b.n	800051e <MEXTI_vSetExtiConfig+0x28e>
	case 2:
		switch (line){
 80003f4:	7bbb      	ldrb	r3, [r7, #14]
 80003f6:	2b03      	cmp	r3, #3
 80003f8:	d844      	bhi.n	8000484 <MEXTI_vSetExtiConfig+0x1f4>
 80003fa:	a201      	add	r2, pc, #4	; (adr r2, 8000400 <MEXTI_vSetExtiConfig+0x170>)
 80003fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000400:	08000411 	.word	0x08000411
 8000404:	0800042b 	.word	0x0800042b
 8000408:	08000449 	.word	0x08000449
 800040c:	08000467 	.word	0x08000467
		case 0:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK1;
 8000410:	4b46      	ldr	r3, [pc, #280]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	4a45      	ldr	r2, [pc, #276]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000416:	f023 030f 	bic.w	r3, r3, #15
 800041a:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= PORT;
 800041c:	4b43      	ldr	r3, [pc, #268]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800041e:	689a      	ldr	r2, [r3, #8]
 8000420:	79bb      	ldrb	r3, [r7, #6]
 8000422:	4942      	ldr	r1, [pc, #264]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000424:	4313      	orrs	r3, r2
 8000426:	608b      	str	r3, [r1, #8]
			break;
 8000428:	e02d      	b.n	8000486 <MEXTI_vSetExtiConfig+0x1f6>
		case 1:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK2;
 800042a:	4b40      	ldr	r3, [pc, #256]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	4a3f      	ldr	r2, [pc, #252]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000430:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000434:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= (PORT <<4);
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	79ba      	ldrb	r2, [r7, #6]
 800043c:	0112      	lsls	r2, r2, #4
 800043e:	4611      	mov	r1, r2
 8000440:	4a3a      	ldr	r2, [pc, #232]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000442:	430b      	orrs	r3, r1
 8000444:	6093      	str	r3, [r2, #8]
			break;
 8000446:	e01e      	b.n	8000486 <MEXTI_vSetExtiConfig+0x1f6>
		case 2:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK3;
 8000448:	4b38      	ldr	r3, [pc, #224]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	4a37      	ldr	r2, [pc, #220]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800044e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000452:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= (PORT << 8);
 8000454:	4b35      	ldr	r3, [pc, #212]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	79ba      	ldrb	r2, [r7, #6]
 800045a:	0212      	lsls	r2, r2, #8
 800045c:	4611      	mov	r1, r2
 800045e:	4a33      	ldr	r2, [pc, #204]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6093      	str	r3, [r2, #8]
			break;
 8000464:	e00f      	b.n	8000486 <MEXTI_vSetExtiConfig+0x1f6>
		case 3:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK4;
 8000466:	4b31      	ldr	r3, [pc, #196]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	4a30      	ldr	r2, [pc, #192]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800046c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000470:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= (PORT << 12);
 8000472:	4b2e      	ldr	r3, [pc, #184]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	79ba      	ldrb	r2, [r7, #6]
 8000478:	0312      	lsls	r2, r2, #12
 800047a:	4611      	mov	r1, r2
 800047c:	4a2b      	ldr	r2, [pc, #172]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 800047e:	430b      	orrs	r3, r1
 8000480:	6093      	str	r3, [r2, #8]
			break;
 8000482:	e000      	b.n	8000486 <MEXTI_vSetExtiConfig+0x1f6>
		default:
			break;
 8000484:	bf00      	nop
		}
		break;
 8000486:	e04a      	b.n	800051e <MEXTI_vSetExtiConfig+0x28e>
	case 3:
		switch (line){
 8000488:	7bbb      	ldrb	r3, [r7, #14]
 800048a:	2b03      	cmp	r3, #3
 800048c:	d844      	bhi.n	8000518 <MEXTI_vSetExtiConfig+0x288>
 800048e:	a201      	add	r2, pc, #4	; (adr r2, 8000494 <MEXTI_vSetExtiConfig+0x204>)
 8000490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000494:	080004a5 	.word	0x080004a5
 8000498:	080004bf 	.word	0x080004bf
 800049c:	080004dd 	.word	0x080004dd
 80004a0:	080004fb 	.word	0x080004fb
		case 0:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK1;
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a20      	ldr	r2, [pc, #128]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004aa:	f023 030f 	bic.w	r3, r3, #15
 80004ae:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= PORT;
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004b2:	68da      	ldr	r2, [r3, #12]
 80004b4:	79bb      	ldrb	r3, [r7, #6]
 80004b6:	491d      	ldr	r1, [pc, #116]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004b8:	4313      	orrs	r3, r2
 80004ba:	60cb      	str	r3, [r1, #12]
			break;
 80004bc:	e02d      	b.n	800051a <MEXTI_vSetExtiConfig+0x28a>
		case 1:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK2;
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	4a1a      	ldr	r2, [pc, #104]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004c8:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= (PORT <<4);
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	79ba      	ldrb	r2, [r7, #6]
 80004d0:	0112      	lsls	r2, r2, #4
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a15      	ldr	r2, [pc, #84]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004d6:	430b      	orrs	r3, r1
 80004d8:	60d3      	str	r3, [r2, #12]
			break;
 80004da:	e01e      	b.n	800051a <MEXTI_vSetExtiConfig+0x28a>
		case 2:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK3;
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a12      	ldr	r2, [pc, #72]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80004e6:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= (PORT << 8);
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	79ba      	ldrb	r2, [r7, #6]
 80004ee:	0212      	lsls	r2, r2, #8
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004f4:	430b      	orrs	r3, r1
 80004f6:	60d3      	str	r3, [r2, #12]
			break;
 80004f8:	e00f      	b.n	800051a <MEXTI_vSetExtiConfig+0x28a>
		case 3:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK4;
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000504:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= (PORT << 12);
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	79ba      	ldrb	r2, [r7, #6]
 800050c:	0312      	lsls	r2, r2, #12
 800050e:	4611      	mov	r1, r2
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <MEXTI_vSetExtiConfig+0x29c>)
 8000512:	430b      	orrs	r3, r1
 8000514:	60d3      	str	r3, [r2, #12]
			break;
 8000516:	e000      	b.n	800051a <MEXTI_vSetExtiConfig+0x28a>
		default:
			break;
 8000518:	bf00      	nop
		}
		break;
 800051a:	e000      	b.n	800051e <MEXTI_vSetExtiConfig+0x28e>
	default:
		break;
 800051c:	bf00      	nop
	}
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40013808 	.word	0x40013808

08000530 <MEXTI_vSetCallback>:
/* 1- Function Description -> Function to set the callback function to the line it will correspond to  */
/* 2- Function Input       -> LINE, *ptr()              											   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vSetCallback(EXTI_Line_x LINE, void(*ptr)(void)){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	71fb      	strb	r3, [r7, #7]
	switch (LINE) {
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <MEXTI_vSetCallback+0x18>
 8000542:	2b01      	cmp	r3, #1
 8000544:	d004      	beq.n	8000550 <MEXTI_vSetCallback+0x20>
		break;
	case EXTI_Line_1:
		EXTI1_Callback =ptr;
		break;
	default:
		break;
 8000546:	e007      	b.n	8000558 <MEXTI_vSetCallback+0x28>
		EXTI0_Callback =ptr;
 8000548:	4a06      	ldr	r2, [pc, #24]	; (8000564 <MEXTI_vSetCallback+0x34>)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	6013      	str	r3, [r2, #0]
		break;
 800054e:	e003      	b.n	8000558 <MEXTI_vSetCallback+0x28>
		EXTI1_Callback =ptr;
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <MEXTI_vSetCallback+0x38>)
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	6013      	str	r3, [r2, #0]
		break;
 8000556:	bf00      	nop
	}
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	2000001c 	.word	0x2000001c
 8000568:	20000020 	.word	0x20000020

0800056c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	EXTI0_Callback();
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <EXTI0_IRQHandler+0x1c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_0);
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <EXTI0_IRQHandler+0x20>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a04      	ldr	r2, [pc, #16]	; (800058c <EXTI0_IRQHandler+0x20>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6153      	str	r3, [r2, #20]
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	2000001c 	.word	0x2000001c
 800058c:	40013c00 	.word	0x40013c00

08000590 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	EXTI1_Callback();
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <EXTI1_IRQHandler+0x1c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_1);
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <EXTI1_IRQHandler+0x20>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <EXTI1_IRQHandler+0x20>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	6153      	str	r3, [r2, #20]
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000020 	.word	0x20000020
 80005b0:	40013c00 	.word	0x40013c00

080005b4 <MGPIO_voidSetPinMode>:
/*      4- MODE_ANALOG                                                                                 */
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8Mod                         */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  ){
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	460b      	mov	r3, r1
 80005c0:	71bb      	strb	r3, [r7, #6]
 80005c2:	4613      	mov	r3, r2
 80005c4:	717b      	strb	r3, [r7, #5]
	
	switch(Copy_u8PortName)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b05      	cmp	r3, #5
 80005ca:	d857      	bhi.n	800067c <MGPIO_voidSetPinMode+0xc8>
 80005cc:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <MGPIO_voidSetPinMode+0x20>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005ed 	.word	0x080005ed
 80005d8:	08000605 	.word	0x08000605
 80005dc:	0800061d 	.word	0x0800061d
 80005e0:	08000635 	.word	0x08000635
 80005e4:	0800064d 	.word	0x0800064d
 80005e8:	08000665 	.word	0x08000665
	{
	  case _GPIOA_PORT : MGPIOA->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <MGPIO_voidSetPinMode+0xd8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	7979      	ldrb	r1, [r7, #5]
 80005f2:	79ba      	ldrb	r2, [r7, #6]
 80005f4:	0052      	lsls	r2, r2, #1
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a23      	ldr	r2, [pc, #140]	; (800068c <MGPIO_voidSetPinMode+0xd8>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	6013      	str	r3, [r2, #0]
 8000602:	e03c      	b.n	800067e <MGPIO_voidSetPinMode+0xca>
	  case _GPIOB_PORT : MGPIOB->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MGPIO_voidSetPinMode+0xdc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	7979      	ldrb	r1, [r7, #5]
 800060a:	79ba      	ldrb	r2, [r7, #6]
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	fa01 f202 	lsl.w	r2, r1, r2
 8000612:	4611      	mov	r1, r2
 8000614:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <MGPIO_voidSetPinMode+0xdc>)
 8000616:	430b      	orrs	r3, r1
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	e030      	b.n	800067e <MGPIO_voidSetPinMode+0xca>
	  case _GPIOC_PORT : MGPIOC->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MGPIO_voidSetPinMode+0xe0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	7979      	ldrb	r1, [r7, #5]
 8000622:	79ba      	ldrb	r2, [r7, #6]
 8000624:	0052      	lsls	r2, r2, #1
 8000626:	fa01 f202 	lsl.w	r2, r1, r2
 800062a:	4611      	mov	r1, r2
 800062c:	4a19      	ldr	r2, [pc, #100]	; (8000694 <MGPIO_voidSetPinMode+0xe0>)
 800062e:	430b      	orrs	r3, r1
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	e024      	b.n	800067e <MGPIO_voidSetPinMode+0xca>
	  case _GPIOD_PORT : MGPIOD->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MGPIO_voidSetPinMode+0xe4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	7979      	ldrb	r1, [r7, #5]
 800063a:	79ba      	ldrb	r2, [r7, #6]
 800063c:	0052      	lsls	r2, r2, #1
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	4611      	mov	r1, r2
 8000644:	4a14      	ldr	r2, [pc, #80]	; (8000698 <MGPIO_voidSetPinMode+0xe4>)
 8000646:	430b      	orrs	r3, r1
 8000648:	6013      	str	r3, [r2, #0]
 800064a:	e018      	b.n	800067e <MGPIO_voidSetPinMode+0xca>
	  case _GPIOE_PORT : MGPIOE->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MGPIO_voidSetPinMode+0xe8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	7979      	ldrb	r1, [r7, #5]
 8000652:	79ba      	ldrb	r2, [r7, #6]
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	4611      	mov	r1, r2
 800065c:	4a0f      	ldr	r2, [pc, #60]	; (800069c <MGPIO_voidSetPinMode+0xe8>)
 800065e:	430b      	orrs	r3, r1
 8000660:	6013      	str	r3, [r2, #0]
 8000662:	e00c      	b.n	800067e <MGPIO_voidSetPinMode+0xca>
	  case _GPIOH_PORT : MGPIOH->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MGPIO_voidSetPinMode+0xec>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	7979      	ldrb	r1, [r7, #5]
 800066a:	79ba      	ldrb	r2, [r7, #6]
 800066c:	0052      	lsls	r2, r2, #1
 800066e:	fa01 f202 	lsl.w	r2, r1, r2
 8000672:	4611      	mov	r1, r2
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <MGPIO_voidSetPinMode+0xec>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e000      	b.n	800067e <MGPIO_voidSetPinMode+0xca>
	  default : /*ERROR*/ break ;
 800067c:	bf00      	nop
    }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40020000 	.word	0x40020000
 8000690:	40020400 	.word	0x40020400
 8000694:	40020800 	.word	0x40020800
 8000698:	40020c00 	.word	0x40020c00
 800069c:	40021000 	.word	0x40021000
 80006a0:	40021c00 	.word	0x40021c00

080006a4 <MGPIO_voidSetPullType>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8PullType                    */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPullType(u8 Copy_u8PortName ,u32 Copy_u8PinNum ,u32 Copy_u8PullType )
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	73fb      	strb	r3, [r7, #15]
	
		switch(Copy_u8PortName)
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	2b05      	cmp	r3, #5
 80006b6:	d851      	bhi.n	800075c <MGPIO_voidSetPullType+0xb8>
 80006b8:	a201      	add	r2, pc, #4	; (adr r2, 80006c0 <MGPIO_voidSetPullType+0x1c>)
 80006ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006be:	bf00      	nop
 80006c0:	080006d9 	.word	0x080006d9
 80006c4:	080006ef 	.word	0x080006ef
 80006c8:	08000705 	.word	0x08000705
 80006cc:	0800071b 	.word	0x0800071b
 80006d0:	08000731 	.word	0x08000731
 80006d4:	08000747 	.word	0x08000747
	{
	  case _GPIOA_PORT : MGPIOA->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <MGPIO_voidSetPullType+0xc8>)
 80006da:	68da      	ldr	r2, [r3, #12]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	4921      	ldr	r1, [pc, #132]	; (800076c <MGPIO_voidSetPullType+0xc8>)
 80006e8:	4313      	orrs	r3, r2
 80006ea:	60cb      	str	r3, [r1, #12]
 80006ec:	e037      	b.n	800075e <MGPIO_voidSetPullType+0xba>
	  case _GPIOB_PORT : MGPIOB->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MGPIO_voidSetPullType+0xcc>)
 80006f0:	68da      	ldr	r2, [r3, #12]
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	491c      	ldr	r1, [pc, #112]	; (8000770 <MGPIO_voidSetPullType+0xcc>)
 80006fe:	4313      	orrs	r3, r2
 8000700:	60cb      	str	r3, [r1, #12]
 8000702:	e02c      	b.n	800075e <MGPIO_voidSetPullType+0xba>
	  case _GPIOC_PORT : MGPIOC->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MGPIO_voidSetPullType+0xd0>)
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	4918      	ldr	r1, [pc, #96]	; (8000774 <MGPIO_voidSetPullType+0xd0>)
 8000714:	4313      	orrs	r3, r2
 8000716:	60cb      	str	r3, [r1, #12]
 8000718:	e021      	b.n	800075e <MGPIO_voidSetPullType+0xba>
	  case _GPIOD_PORT : MGPIOD->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MGPIO_voidSetPullType+0xd4>)
 800071c:	68da      	ldr	r2, [r3, #12]
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	fa01 f303 	lsl.w	r3, r1, r3
 8000728:	4913      	ldr	r1, [pc, #76]	; (8000778 <MGPIO_voidSetPullType+0xd4>)
 800072a:	4313      	orrs	r3, r2
 800072c:	60cb      	str	r3, [r1, #12]
 800072e:	e016      	b.n	800075e <MGPIO_voidSetPullType+0xba>
	  case _GPIOE_PORT : MGPIOE->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MGPIO_voidSetPullType+0xd8>)
 8000732:	68da      	ldr	r2, [r3, #12]
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	490f      	ldr	r1, [pc, #60]	; (800077c <MGPIO_voidSetPullType+0xd8>)
 8000740:	4313      	orrs	r3, r2
 8000742:	60cb      	str	r3, [r1, #12]
 8000744:	e00b      	b.n	800075e <MGPIO_voidSetPullType+0xba>
	  case _GPIOH_PORT : MGPIOH->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MGPIO_voidSetPullType+0xdc>)
 8000748:	68da      	ldr	r2, [r3, #12]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	fa01 f303 	lsl.w	r3, r1, r3
 8000754:	490a      	ldr	r1, [pc, #40]	; (8000780 <MGPIO_voidSetPullType+0xdc>)
 8000756:	4313      	orrs	r3, r2
 8000758:	60cb      	str	r3, [r1, #12]
 800075a:	e000      	b.n	800075e <MGPIO_voidSetPullType+0xba>
	  default : /*ERROR*/ break ;
 800075c:	bf00      	nop
	}
	
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40020000 	.word	0x40020000
 8000770:	40020400 	.word	0x40020400
 8000774:	40020800 	.word	0x40020800
 8000778:	40020c00 	.word	0x40020c00
 800077c:	40021000 	.word	0x40021000
 8000780:	40021c00 	.word	0x40021c00

08000784 <MGPIO_u8ReadData>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum                                        */                   
/* 3- Function Return      -> LOC_u8ReturnValue                                                        */
/*******************************************************************************************************/

u8 MGPIO_u8ReadData(u8 Copy_u8PORT ,u8 Copy_u8PIN)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	u8 L_u8Data = 0 ;
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]
	switch(Copy_u8PORT)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b05      	cmp	r3, #5
 800079c:	d84a      	bhi.n	8000834 <MGPIO_u8ReadData+0xb0>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <MGPIO_u8ReadData+0x20>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007bd 	.word	0x080007bd
 80007a8:	080007d1 	.word	0x080007d1
 80007ac:	080007e5 	.word	0x080007e5
 80007b0:	080007f9 	.word	0x080007f9
 80007b4:	0800080d 	.word	0x0800080d
 80007b8:	08000821 	.word	0x08000821
	{ 
	  case _GPIOA_PORT :L_u8Data= GET_BIT(MGPIOA->IDR,Copy_u8PIN ) ; break;
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MGPIO_u8ReadData+0xc0>)
 80007be:	691a      	ldr	r2, [r3, #16]
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	fa22 f303 	lsr.w	r3, r2, r3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e032      	b.n	8000836 <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOB_PORT :L_u8Data= GET_BIT(MGPIOB->IDR,Copy_u8PIN ) ; break;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MGPIO_u8ReadData+0xc4>)
 80007d2:	691a      	ldr	r2, [r3, #16]
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	fa22 f303 	lsr.w	r3, r2, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	e028      	b.n	8000836 <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOC_PORT :L_u8Data= GET_BIT(MGPIOC->IDR,Copy_u8PIN ) ; break;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <MGPIO_u8ReadData+0xc8>)
 80007e6:	691a      	ldr	r2, [r3, #16]
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	fa22 f303 	lsr.w	r3, r2, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]
 80007f6:	e01e      	b.n	8000836 <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOD_PORT :L_u8Data= GET_BIT(MGPIOD->IDR,Copy_u8PIN) ; break;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MGPIO_u8ReadData+0xcc>)
 80007fa:	691a      	ldr	r2, [r3, #16]
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	e014      	b.n	8000836 <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOE_PORT :L_u8Data= GET_BIT(MGPIOE->IDR,Copy_u8PIN) ; break;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MGPIO_u8ReadData+0xd0>)
 800080e:	691a      	ldr	r2, [r3, #16]
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	fa22 f303 	lsr.w	r3, r2, r3
 8000816:	b2db      	uxtb	r3, r3
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e00a      	b.n	8000836 <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOH_PORT :L_u8Data= GET_BIT(MGPIOH->IDR,Copy_u8PIN) ; break;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MGPIO_u8ReadData+0xd4>)
 8000822:	691a      	ldr	r2, [r3, #16]
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	fa22 f303 	lsr.w	r3, r2, r3
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	e000      	b.n	8000836 <MGPIO_u8ReadData+0xb2>
	  default : /*ERROR*/ break ;
 8000834:	bf00      	nop
		
	}
	return L_u8Data;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000838:	4618      	mov	r0, r3
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	40020000 	.word	0x40020000
 8000848:	40020400 	.word	0x40020400
 800084c:	40020800 	.word	0x40020800
 8000850:	40020c00 	.word	0x40020c00
 8000854:	40021000 	.word	0x40021000
 8000858:	40021c00 	.word	0x40021c00

0800085c <MGPIO_voidWriteData>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8State                       */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidWriteData(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8State)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	460b      	mov	r3, r1
 8000868:	71bb      	strb	r3, [r7, #6]
 800086a:	4613      	mov	r3, r2
 800086c:	717b      	strb	r3, [r7, #5]
	if(Copy_u8State==HIGH)
 800086e:	797b      	ldrb	r3, [r7, #5]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d155      	bne.n	8000920 <MGPIO_voidWriteData+0xc4>
	{
		switch(Copy_u8PortName)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b05      	cmp	r3, #5
 8000878:	f200 80ac 	bhi.w	80009d4 <MGPIO_voidWriteData+0x178>
 800087c:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <MGPIO_voidWriteData+0x28>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	0800089d 	.word	0x0800089d
 8000888:	080008b3 	.word	0x080008b3
 800088c:	080008c9 	.word	0x080008c9
 8000890:	080008df 	.word	0x080008df
 8000894:	080008f5 	.word	0x080008f5
 8000898:	0800090b 	.word	0x0800090b
		{
		case _GPIOA_PORT :  SET_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 800089c:	4b52      	ldr	r3, [pc, #328]	; (80009e8 <MGPIO_voidWriteData+0x18c>)
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	79ba      	ldrb	r2, [r7, #6]
 80008a2:	2101      	movs	r1, #1
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a4f      	ldr	r2, [pc, #316]	; (80009e8 <MGPIO_voidWriteData+0x18c>)
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6153      	str	r3, [r2, #20]
 80008b0:	e093      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		case _GPIOB_PORT :  SET_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 80008b2:	4b4e      	ldr	r3, [pc, #312]	; (80009ec <MGPIO_voidWriteData+0x190>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	79ba      	ldrb	r2, [r7, #6]
 80008b8:	2101      	movs	r1, #1
 80008ba:	fa01 f202 	lsl.w	r2, r1, r2
 80008be:	4611      	mov	r1, r2
 80008c0:	4a4a      	ldr	r2, [pc, #296]	; (80009ec <MGPIO_voidWriteData+0x190>)
 80008c2:	430b      	orrs	r3, r1
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	e088      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		case _GPIOC_PORT :  SET_BIT(GPIOC_ODR,Copy_u8PinNum); break;
 80008c8:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <MGPIO_voidWriteData+0x194>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	79ba      	ldrb	r2, [r7, #6]
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a46      	ldr	r2, [pc, #280]	; (80009f0 <MGPIO_voidWriteData+0x194>)
 80008d8:	430b      	orrs	r3, r1
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	e07d      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		case _GPIOD_PORT :  SET_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 80008de:	4b45      	ldr	r3, [pc, #276]	; (80009f4 <MGPIO_voidWriteData+0x198>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	79ba      	ldrb	r2, [r7, #6]
 80008e4:	2101      	movs	r1, #1
 80008e6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a41      	ldr	r2, [pc, #260]	; (80009f4 <MGPIO_voidWriteData+0x198>)
 80008ee:	430b      	orrs	r3, r1
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	e072      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		case _GPIOE_PORT :  SET_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 80008f4:	4b40      	ldr	r3, [pc, #256]	; (80009f8 <MGPIO_voidWriteData+0x19c>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	79ba      	ldrb	r2, [r7, #6]
 80008fa:	2101      	movs	r1, #1
 80008fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000900:	4611      	mov	r1, r2
 8000902:	4a3d      	ldr	r2, [pc, #244]	; (80009f8 <MGPIO_voidWriteData+0x19c>)
 8000904:	430b      	orrs	r3, r1
 8000906:	6153      	str	r3, [r2, #20]
 8000908:	e067      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		case _GPIOH_PORT :  SET_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 800090a:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <MGPIO_voidWriteData+0x1a0>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	79ba      	ldrb	r2, [r7, #6]
 8000910:	2101      	movs	r1, #1
 8000912:	fa01 f202 	lsl.w	r2, r1, r2
 8000916:	4611      	mov	r1, r2
 8000918:	4a38      	ldr	r2, [pc, #224]	; (80009fc <MGPIO_voidWriteData+0x1a0>)
 800091a:	430b      	orrs	r3, r1
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	e05c      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
		}
		
	}
	else{
		switch(Copy_u8PortName)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b05      	cmp	r3, #5
 8000924:	d858      	bhi.n	80009d8 <MGPIO_voidWriteData+0x17c>
 8000926:	a201      	add	r2, pc, #4	; (adr r2, 800092c <MGPIO_voidWriteData+0xd0>)
 8000928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092c:	08000945 	.word	0x08000945
 8000930:	0800095d 	.word	0x0800095d
 8000934:	08000975 	.word	0x08000975
 8000938:	0800098d 	.word	0x0800098d
 800093c:	080009a5 	.word	0x080009a5
 8000940:	080009bd 	.word	0x080009bd
		{
		case _GPIOA_PORT :  CLR_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <MGPIO_voidWriteData+0x18c>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	79ba      	ldrb	r2, [r7, #6]
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	43d2      	mvns	r2, r2
 8000952:	4611      	mov	r1, r2
 8000954:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <MGPIO_voidWriteData+0x18c>)
 8000956:	400b      	ands	r3, r1
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	e03e      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		case _GPIOB_PORT :  CLR_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <MGPIO_voidWriteData+0x190>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	79ba      	ldrb	r2, [r7, #6]
 8000962:	2101      	movs	r1, #1
 8000964:	fa01 f202 	lsl.w	r2, r1, r2
 8000968:	43d2      	mvns	r2, r2
 800096a:	4611      	mov	r1, r2
 800096c:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <MGPIO_voidWriteData+0x190>)
 800096e:	400b      	ands	r3, r1
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	e032      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		case _GPIOC_PORT :  CLR_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <MGPIO_voidWriteData+0x1a4>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	79ba      	ldrb	r2, [r7, #6]
 800097a:	2101      	movs	r1, #1
 800097c:	fa01 f202 	lsl.w	r2, r1, r2
 8000980:	43d2      	mvns	r2, r2
 8000982:	4611      	mov	r1, r2
 8000984:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <MGPIO_voidWriteData+0x1a4>)
 8000986:	400b      	ands	r3, r1
 8000988:	6153      	str	r3, [r2, #20]
 800098a:	e026      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		case _GPIOD_PORT :  CLR_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MGPIO_voidWriteData+0x198>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	79ba      	ldrb	r2, [r7, #6]
 8000992:	2101      	movs	r1, #1
 8000994:	fa01 f202 	lsl.w	r2, r1, r2
 8000998:	43d2      	mvns	r2, r2
 800099a:	4611      	mov	r1, r2
 800099c:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MGPIO_voidWriteData+0x198>)
 800099e:	400b      	ands	r3, r1
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	e01a      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		case _GPIOE_PORT :  CLR_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MGPIO_voidWriteData+0x19c>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	79ba      	ldrb	r2, [r7, #6]
 80009aa:	2101      	movs	r1, #1
 80009ac:	fa01 f202 	lsl.w	r2, r1, r2
 80009b0:	43d2      	mvns	r2, r2
 80009b2:	4611      	mov	r1, r2
 80009b4:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <MGPIO_voidWriteData+0x19c>)
 80009b6:	400b      	ands	r3, r1
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	e00e      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		case _GPIOH_PORT :  CLR_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MGPIO_voidWriteData+0x1a0>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	79ba      	ldrb	r2, [r7, #6]
 80009c2:	2101      	movs	r1, #1
 80009c4:	fa01 f202 	lsl.w	r2, r1, r2
 80009c8:	43d2      	mvns	r2, r2
 80009ca:	4611      	mov	r1, r2
 80009cc:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <MGPIO_voidWriteData+0x1a0>)
 80009ce:	400b      	ands	r3, r1
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	e002      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
 80009d4:	bf00      	nop
 80009d6:	e000      	b.n	80009da <MGPIO_voidWriteData+0x17e>
		
		default : /*ERROR*/ break ;
 80009d8:	bf00      	nop
		}
	}
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40020814 	.word	0x40020814
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40021c00 	.word	0x40021c00
 8000a00:	40020800 	.word	0x40020800

08000a04 <MNVIC_vInterruptSetEnable>:
 * Function: 	Enable External Interrupts
 * Inputs: 		Interrupt ID
 * Outputs:		None
 */

void MNVIC_vInterruptSetEnable(u8 Copy_u8InterruptID){
 8000a04:	b490      	push	{r4, r7}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	NVIC -> ISER[Copy_u8InterruptID / REGISTER_BITS] |= (1<<(Copy_u8InterruptID % REGISTER_BITS));
 8000a0e:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <MNVIC_vInterruptSetEnable+0x3c>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	b2d8      	uxtb	r0, r3
 8000a16:	4603      	mov	r3, r0
 8000a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1c:	79fa      	ldrb	r2, [r7, #7]
 8000a1e:	f002 021f 	and.w	r2, r2, #31
 8000a22:	2101      	movs	r1, #1
 8000a24:	fa01 f202 	lsl.w	r2, r1, r2
 8000a28:	4614      	mov	r4, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <MNVIC_vInterruptSetEnable+0x3c>)
 8000a2c:	4601      	mov	r1, r0
 8000a2e:	4323      	orrs	r3, r4
 8000a30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc90      	pop	{r4, r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <MNVIC_vSetGroupMode>:
 * Function: 	Set Group Mode in SCB (AIRCR)
 * Inputs: 		Group Mode
 * Outputs:		None
 */

void MNVIC_vSetGroupMode(Group_Mode Copy_GroupMode){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	Global_u32SetGroupPriority = VECTKEY | (Copy_GroupMode << 8);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <MNVIC_vSetGroupMode+0x30>)
 8000a5e:	601a      	str	r2, [r3, #0]
	AIRCR = Global_u32SetGroupPriority;
 8000a60:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <MNVIC_vSetGroupMode+0x34>)
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <MNVIC_vSetGroupMode+0x30>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	20000024 	.word	0x20000024
 8000a78:	e000ed0c 	.word	0xe000ed0c

08000a7c <MNVIC_vSetInterruptPriority>:
 * 				2- Group ID
 * 				3- Subgroup ID
 * Outputs:		None
 */

void MNVIC_vSetInterruptPriority(u8 Copy_u8InterruptID, u8 Copy_GroupID, u8 Copy_SubGroupID){
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
 8000a86:	460b      	mov	r3, r1
 8000a88:	71bb      	strb	r3, [r7, #6]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	717b      	strb	r3, [r7, #5]
	u8 u8_PrioValue = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
	switch (Global_u32SetGroupPriority){
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MNVIC_vSetInterruptPriority+0x9c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3b03      	subs	r3, #3
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d82e      	bhi.n	8000afa <MNVIC_vSetInterruptPriority+0x7e>
 8000a9c:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <MNVIC_vSetInterruptPriority+0x28>)
 8000a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa2:	bf00      	nop
 8000aa4:	08000ab9 	.word	0x08000ab9
 8000aa8:	08000abf 	.word	0x08000abf
 8000aac:	08000ad1 	.word	0x08000ad1
 8000ab0:	08000ae3 	.word	0x08000ae3
 8000ab4:	08000af5 	.word	0x08000af5
	case MNVIC_G16_SG0: u8_PrioValue = Copy_GroupID; break;
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e01d      	b.n	8000afa <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G8_SG2: 	u8_PrioValue = (Copy_GroupID << 1) | Copy_SubGroupID; break;
 8000abe:	79bb      	ldrb	r3, [r7, #6]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	b25a      	sxtb	r2, r3
 8000ac4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	73fb      	strb	r3, [r7, #15]
 8000ace:	e014      	b.n	8000afa <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G4_SG4: 	u8_PrioValue = (Copy_GroupID << 2) | Copy_SubGroupID; break;
 8000ad0:	79bb      	ldrb	r3, [r7, #6]
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	b25a      	sxtb	r2, r3
 8000ad6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e00b      	b.n	8000afa <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G2_SG8: 	u8_PrioValue = (Copy_GroupID << 3) | Copy_SubGroupID; break;
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	b25a      	sxtb	r2, r3
 8000ae8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	e002      	b.n	8000afa <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G0_SG16: u8_PrioValue = Copy_SubGroupID; break;
 8000af4:	797b      	ldrb	r3, [r7, #5]
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	bf00      	nop
	}
	NVIC -> IPR [Copy_u8InterruptID] = (u8_PrioValue << 4);
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <MNVIC_vSetInterruptPriority+0xa0>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	7bfa      	ldrb	r2, [r7, #15]
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000024 	.word	0x20000024
 8000b1c:	e000e100 	.word	0xe000e100

08000b20 <MRCC_vInit>:
#include "MRCC_Int.h"
#include "MRCC_Private.h"
#include "MRCC_Config.h"

void MRCC_vInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	/*1- CSS (ON/OFF) */

	/*2- HSE_BYP CLR->Oscillator Enable not bypassed, SET->Oscillator Disable bypassed */
	CLR_BIT(RCC -> CR, HSEBYP);
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MRCC_vInit+0x34>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <MRCC_vInit+0x34>)
 8000b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2e:	6013      	str	r3, [r2, #0]

	/*3- select clock switch (HSI/HSE/PLL) */
	SET_BIT(RCC -> CFGR, SW0);
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MRCC_vInit+0x34>)
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <MRCC_vInit+0x34>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6093      	str	r3, [r2, #8]

	/*5- PLL configuration */

	/*6- Enable the selected clock (HSI ON / HSE ON / PLL ON)*/
#if RCC_HSE_ENABLE == ENABLE
	SET_BIT(RCC->CR, HSEON);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <MRCC_vInit+0x34>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <MRCC_vInit+0x34>)
 8000b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b46:	6013      	str	r3, [r2, #0]
#endif

}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <MRCC_vEnableClock>:

void MRCC_vEnableClock(RCC_ENR REG, RCC_Peripheral PER)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]
/******************** Assignment *******************************/
	switch(REG){
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d836      	bhi.n	8000bdc <MRCC_vEnableClock+0x84>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <MRCC_vEnableClock+0x1c>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000b9b 	.word	0x08000b9b
 8000b7c:	08000bb1 	.word	0x08000bb1
 8000b80:	08000bc7 	.word	0x08000bc7
	case AHB1:
		SET_BIT(RCC -> AHB1ENR ,  PER);
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MRCC_vEnableClock+0x94>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	79ba      	ldrb	r2, [r7, #6]
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b90:	4611      	mov	r1, r2
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <MRCC_vEnableClock+0x94>)
 8000b94:	430b      	orrs	r3, r1
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000b98:	e021      	b.n	8000bde <MRCC_vEnableClock+0x86>
	case AHB2:
		SET_BIT(RCC -> AHB2ENR ,  PER);
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MRCC_vEnableClock+0x94>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9e:	79ba      	ldrb	r2, [r7, #6]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4a10      	ldr	r2, [pc, #64]	; (8000bec <MRCC_vEnableClock+0x94>)
 8000baa:	430b      	orrs	r3, r1
 8000bac:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000bae:	e016      	b.n	8000bde <MRCC_vEnableClock+0x86>
	case APB1:
		SET_BIT(RCC -> APB1ENR ,  PER);
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MRCC_vEnableClock+0x94>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	79ba      	ldrb	r2, [r7, #6]
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <MRCC_vEnableClock+0x94>)
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000bc4:	e00b      	b.n	8000bde <MRCC_vEnableClock+0x86>
	case APB2:
		SET_BIT(RCC -> APB2ENR ,  PER);
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MRCC_vEnableClock+0x94>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	79ba      	ldrb	r2, [r7, #6]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4a05      	ldr	r2, [pc, #20]	; (8000bec <MRCC_vEnableClock+0x94>)
 8000bd6:	430b      	orrs	r3, r1
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 8000bda:	e000      	b.n	8000bde <MRCC_vEnableClock+0x86>
	default:
		break;
 8000bdc:	bf00      	nop
	}
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <SysTick_Handler>:

void CALLBACKSYS(void(*callback)(void)){
	callbacksys = callback;
}

void SysTick_Handler(void){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	callbacksys();
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <SysTick_Handler+0x10>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4798      	blx	r3

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000028 	.word	0x20000028

08000c04 <delay>:

/*******************************************************************************************************/
/***************************************** MAIN FUNCTIONS **********************************************/
/*******************************************************************************************************/

void delay(u32 count) {
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    for (volatile u32 i = 0; i < count; ++i) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e00c      	b.n	8000c2c <delay+0x28>
        for (volatile u32 j = 0; j < 1000; ++j) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	e002      	b.n	8000c1e <delay+0x1a>
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c24:	d3f8      	bcc.n	8000c18 <delay+0x14>
    for (volatile u32 i = 0; i < count; ++i) {
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8ee      	bhi.n	8000c12 <delay+0xe>
        }
    }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <APP_vLEDon>:

void APP_vLEDon(void){
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
	if(MGPIO_u8ReadData(_GPIOA_PORT, _PIN_0) & 0x01){
 8000c46:	2100      	movs	r1, #0
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff fd9b 	bl	8000784 <MGPIO_u8ReadData>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00e      	beq.n	8000c76 <APP_vLEDon+0x34>
		MGPIO_voidWriteData(_GPIOB_PORT, _PIN_0, HIGH);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f7ff fdfd 	bl	800085c <MGPIO_voidWriteData>
		MGPIO_voidWriteData(_GPIOB_PORT, _PIN_1, HIGH);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2101      	movs	r1, #1
 8000c66:	2001      	movs	r0, #1
 8000c68:	f7ff fdf8 	bl	800085c <MGPIO_voidWriteData>
		MGPIO_voidWriteData(_GPIOB_PORT, _PIN_2, HIGH);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2102      	movs	r1, #2
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fdf3 	bl	800085c <MGPIO_voidWriteData>
	}
	delay(5000);
 8000c76:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c7a:	f7ff ffc3 	bl	8000c04 <delay>
	MGPIO_voidWriteData(_GPIOB_PORT, _PIN_0, LOW);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fdea 	bl	800085c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(_GPIOB_PORT, _PIN_1, LOW);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff fde5 	bl	800085c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(_GPIOB_PORT, _PIN_2, LOW);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2102      	movs	r1, #2
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff fde0 	bl	800085c <MGPIO_voidWriteData>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <main>:



int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	/************ Clock Initialization ****************/

	MRCC_vInit();
 8000ca4:	f7ff ff3c 	bl	8000b20 <MRCC_vInit>
	MRCC_vEnableClock(AHB1, RCC_GPIOA_EN);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff ff54 	bl	8000b58 <MRCC_vEnableClock>
	MRCC_vEnableClock(AHB1, RCC_GPIOB_EN);
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff ff50 	bl	8000b58 <MRCC_vEnableClock>
	MRCC_vEnableClock(APB2, RCC_SYSCFG_EN);
 8000cb8:	210e      	movs	r1, #14
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f7ff ff4c 	bl	8000b58 <MRCC_vEnableClock>

	/************* GPIO Configuration *****************/

	MGPIO_voidSetPinMode(_GPIOA_PORT,  _PIN_0, _MODE_INPUT);	/* PB INPUT */
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f7ff fc75 	bl	80005b4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullType(_GPIOA_PORT, _PIN_0, _PULL_UP);		/* PULL UP */
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fce8 	bl	80006a4 <MGPIO_voidSetPullType>

	MGPIO_voidSetPinMode(_GPIOB_PORT, _PIN_0, _MODE_OUTPUT);	/* LED 1 */
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fc6b 	bl	80005b4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(_GPIOB_PORT, _PIN_1, _MODE_OUTPUT);	/* LED 2 */
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fc66 	bl	80005b4 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(_GPIOB_PORT, _PIN_2, _MODE_OUTPUT);	/* LED 3 */
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2102      	movs	r1, #2
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff fc61 	bl	80005b4 <MGPIO_voidSetPinMode>

	/*********** Interrupt Configuration **************/

	MNVIC_vInterruptSetEnable(6);								/* EXTI0*/
 8000cf2:	2006      	movs	r0, #6
 8000cf4:	f7ff fe86 	bl	8000a04 <MNVIC_vInterruptSetEnable>
	MNVIC_vSetGroupMode(MNVIC_G4_SG4);
 8000cf8:	2005      	movs	r0, #5
 8000cfa:	f7ff fea3 	bl	8000a44 <MNVIC_vSetGroupMode>
	MNVIC_vSetInterruptPriority(6, 0, 0);						/* Make EXTI0 in Group 0 with Priority 0 */
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2006      	movs	r0, #6
 8000d04:	f7ff feba 	bl	8000a7c <MNVIC_vSetInterruptPriority>

	MEXTI_vHWInterruptEnable(EXTI_Line_0);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fa63 	bl	80001d4 <MEXTI_vHWInterruptEnable>
	MEXTI_vSetTriggerType(EXTI_Line_0, Rising);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fa77 	bl	8000204 <MEXTI_vSetTriggerType>
	MEXTI_vSetExtiConfig(EXTI_Line_0, SYSCFG_PORTA);
 8000d16:	2100      	movs	r1, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fab9 	bl	8000290 <MEXTI_vSetExtiConfig>
	MEXTI_vSetCallback(EXTI_Line_0, APP_vLEDon);
 8000d1e:	4902      	ldr	r1, [pc, #8]	; (8000d28 <main+0x88>)
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fc05 	bl	8000530 <MEXTI_vSetCallback>

	while (1){}
 8000d26:	e7fe      	b.n	8000d26 <main+0x86>
 8000d28:	08000c43 	.word	0x08000c43

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd7 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f000 f811 	bl	8000dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff ff69 	bl	8000ca0 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ddc:	08000e54 	.word	0x08000e54
  ldr r2, =_sbss
 8000de0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000de4:	2000002c 	.word	0x2000002c

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <__libc_init_array>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	4d0d      	ldr	r5, [pc, #52]	; (8000e24 <__libc_init_array+0x38>)
 8000df0:	4c0d      	ldr	r4, [pc, #52]	; (8000e28 <__libc_init_array+0x3c>)
 8000df2:	1b64      	subs	r4, r4, r5
 8000df4:	10a4      	asrs	r4, r4, #2
 8000df6:	2600      	movs	r6, #0
 8000df8:	42a6      	cmp	r6, r4
 8000dfa:	d109      	bne.n	8000e10 <__libc_init_array+0x24>
 8000dfc:	4d0b      	ldr	r5, [pc, #44]	; (8000e2c <__libc_init_array+0x40>)
 8000dfe:	4c0c      	ldr	r4, [pc, #48]	; (8000e30 <__libc_init_array+0x44>)
 8000e00:	f000 f818 	bl	8000e34 <_init>
 8000e04:	1b64      	subs	r4, r4, r5
 8000e06:	10a4      	asrs	r4, r4, #2
 8000e08:	2600      	movs	r6, #0
 8000e0a:	42a6      	cmp	r6, r4
 8000e0c:	d105      	bne.n	8000e1a <__libc_init_array+0x2e>
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
 8000e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e14:	4798      	blx	r3
 8000e16:	3601      	adds	r6, #1
 8000e18:	e7ee      	b.n	8000df8 <__libc_init_array+0xc>
 8000e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e1e:	4798      	blx	r3
 8000e20:	3601      	adds	r6, #1
 8000e22:	e7f2      	b.n	8000e0a <__libc_init_array+0x1e>
 8000e24:	08000e4c 	.word	0x08000e4c
 8000e28:	08000e4c 	.word	0x08000e4c
 8000e2c:	08000e4c 	.word	0x08000e4c
 8000e30:	08000e50 	.word	0x08000e50

08000e34 <_init>:
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	bf00      	nop
 8000e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3a:	bc08      	pop	{r3}
 8000e3c:	469e      	mov	lr, r3
 8000e3e:	4770      	bx	lr

08000e40 <_fini>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	bf00      	nop
 8000e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e46:	bc08      	pop	{r3}
 8000e48:	469e      	mov	lr, r3
 8000e4a:	4770      	bx	lr
